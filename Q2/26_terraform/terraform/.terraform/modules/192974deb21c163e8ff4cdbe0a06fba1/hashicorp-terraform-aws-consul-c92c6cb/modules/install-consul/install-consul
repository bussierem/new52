#!/bin/bash
# This script can be used to install Consul and its dependencies. This script has been tested with the following
# operating systems:
#
# 1. Ubuntu 16.04
# 1. Amazon Linux

set -e

readonly DEFAULT_INSTALL_PATH="/opt/consul"
readonly DEFAULT_CONSUL_USER="consul"

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SYSTEM_BIN_DIR="/usr/local/bin"

readonly SUPERVISOR_DIR="/etc/supervisor"
readonly SUPERVISOR_CONF_DIR="$SUPERVISOR_DIR/conf.d"

readonly SCRIPT_NAME="$(basename "$0")"

function print_usage {
  echo
  echo "Usage: install-consul [OPTIONS]"
  echo
  echo "This script can be used to install Consul and its dependencies. This script has been tested with Ubuntu 16.04 and Amazon Linux."
  echo
  echo "Options:"
  echo
  echo -e "  --version\t\tThe version of Consul to install. Required."
  echo -e "  --path\t\tThe path where Consul should be installed. Optional. Default: $DEFAULT_INSTALL_PATH."
  echo -e "  --user\t\tThe user who will own the Consul install directories. Optional. Default: $DEFAULT_CONSUL_USER."
  echo -e "  --ca-file-path\t\tPath to a PEM-encoded certificate authority used to encrypt and verify authenticity of client and server connections. Will be installed under <install-path>/tls/ca."
  echo -e "  --cert-file-path\t\tPath to a PEM-encoded certificate, which will be provided to clients or servers to verify the agent's authenticity. Will be installed under <install-path>/tls. Must be provided along with --key-file-path."
  echo -e "  --key-file-path\t\tPath to a PEM-encoded private key, used with the certificate to verify the agent's authenticity. Will be installed under <install-path>/tls. Must be provided along with --cert-file-path"
  echo
  echo "Example:"
  echo
  echo "  install-consul --version 0.8.0"
}

function log {
  local readonly level="$1"
  local readonly message="$2"
  local readonly timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local readonly message="$1"
  log "INFO" "$message"
}

function log_warn {
  local readonly message="$1"
  log "WARN" "$message"
}

function log_error {
  local readonly message="$1"
  log "ERROR" "$message"
}

function assert_not_empty {
  local readonly arg_name="$1"
  local readonly arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

# Install steps are based on: http://unix.stackexchange.com/a/291098/215969
function install_supervisord_debian {
  sudo apt-get install -y supervisor
  sudo update-rc.d supervisor defaults

  create_supervisor_config
  sudo systemctl enable supervisor
}

function two_way_symlink() {
  local src="$1"
  local dest="$2"

  if [[ ! -f "$dest" ]] && [[ ! -f "$src" ]]; then
    echo "Missing source '$src' AND destination '$dest' exiting..."
    exit -5
  fi

  if [[ ! -f "$dest" ]]; then
    ## Destination isn't there point it to source
    sudo ln -s $src  $dest
  elif [[ ! -f "$src" ]]; then
    ## Source file was missing, point to destination.  Should ONLY do so if it doesn't already exist (e.g. hadn't already been dual linked)
    sudo ln -s $dest $src
  fi


}

# Install steps are based on: http://stackoverflow.com/a/31576473/483528
function install_supervisord_amazon_linux {
  sudo pip install supervisor

  # On Amazon Linux, /usr/local/bin is not in PATH for the root user, so we add symlinks to /usr/bin, which is in PATH
  two_way_symlink "/usr/bin/supervisorctl" "/usr/local/bin/supervisorctl"
  two_way_symlink "/usr/bin/supervisord" "/usr/local/bin/supervisord"

  sudo cp "$SCRIPT_DIR/supervisor-initd-script.sh" "/etc/init.d/supervisor"
  sudo chmod a+x /etc/init.d/supervisor
  sudo mkdir -p /var/log/supervisor

  create_supervisor_config
  sudo chkconfig --add supervisor
  sudo chkconfig supervisor on

  # Amazon Linux does not automatically start supervisord after installing it. This command does that.
  sudo service supervisor start
}

function create_supervisor_config {
  sudo mkdir -p "$SUPERVISOR_CONF_DIR"
  sudo cp "$SCRIPT_DIR/supervisord.conf" "$SUPERVISOR_DIR/supervisord.conf"
}

function has_yum {
  [ -n "$(command -v yum)" ]
}

function has_apt_get {
  [ -n "$(command -v apt-get)" ]
}

function install_dependencies {
  log_info "Installing dependencies"

  if $(has_apt_get); then
    sudo apt-get update -y
    sudo apt-get install -y awscli curl unzip jq
    install_supervisord_debian
  elif $(has_yum); then
    sudo yum update -y
    sudo yum install -y aws curl unzip jq
    install_supervisord_amazon_linux
  else
    log_error "Could not find apt-get or yum. Cannot install dependencies on this OS."
    exit 1
  fi
}

function user_exists {
  local readonly username="$1"
  id "$username" >/dev/null 2>&1
}

function create_consul_user {
  local readonly username="$1"

  if $(user_exists "$username"); then
    echo "User $username already exists. Will not create again."
  else
    log_info "Creating user named $username"
    sudo useradd "$username"
  fi
}

function create_consul_install_paths {
  local readonly path="$1"
  local readonly username="$2"

  log_info "Creating install dirs for Consul at $path"
  sudo mkdir -p "$path"
  sudo mkdir -p "$path/bin"
  sudo mkdir -p "$path/config"
  sudo mkdir -p "$path/data"
  sudo mkdir -p "$path/log"
  sudo mkdir -p "$path/tls/ca"

  log_info "Changing ownership of $path to $username"
  sudo chown -R "$username:$username" "$path"
}

function install_binaries {
  local readonly version="$1"
  local readonly path="$2"
  local readonly username="$3"

  local readonly url="https://releases.hashicorp.com/consul/${version}/consul_${version}_linux_amd64.zip"
  local readonly download_path="/tmp/consul_${version}_linux_amd64.zip"
  local readonly bin_dir="$path/bin"
  local readonly consul_dest_path="$bin_dir/consul"
  local readonly run_consul_dest_path="$bin_dir/run-consul"

  log_info "Downloading Consul $version from $url to $download_path"
  curl -o "$download_path" "$url"
  unzip -d /tmp "$download_path"

  log_info "Moving Consul binary to $consul_dest_path"
  sudo mv "/tmp/consul" "$consul_dest_path"
  sudo chown "$username:$username" "$consul_dest_path"
  sudo chmod a+x "$consul_dest_path"

  local readonly symlink_path="$SYSTEM_BIN_DIR/consul"
  if [[ -f "$symlink_path" ]]; then
    log_info "Symlink $symlink_path already exists. Will not add again."
  else
    log_info "Adding symlink to $consul_dest_path in $symlink_path"
    sudo ln -s "$consul_dest_path" "$symlink_path"
  fi

  log_info "Copying Consul run script to $run_consul_dest_path"
  sudo cp "$SCRIPT_DIR/../run-consul/run-consul" "$run_consul_dest_path"
  sudo chown "$username:$username" "$run_consul_dest_path"
  sudo chmod a+x "$run_consul_dest_path"
}

function install_tls_certificates {
  local readonly path="$1"
  local readonly user="$2"
  local readonly ca_file_path="$3"
  local readonly cert_file_path="$4"
  local readonly key_file_path="$5"

  local readonly consul_tls_certs_path="$path/tls"
  local readonly ca_certs_path="$consul_tls_certs_path/ca"

  log_info "Moving TLS certs to $consul_tls_certs_path and $ca_certs_path"

  sudo mkdir -p "$ca_certs_path"
  sudo mv "$ca_file_path" "$ca_certs_path/"
  sudo mv "$cert_file_path" "$consul_tls_certs_path/"
  sudo mv "$key_file_path" "$consul_tls_certs_path/"

  sudo chown -R "$user:$user" "$consul_tls_certs_path/"
  sudo find "$consul_tls_certs_path/" -type f -exec chmod u=r,g=,o= {} \;
}

function install {
  local version=""
  local path="$DEFAULT_INSTALL_PATH"
  local user="$DEFAULT_CONSUL_USER"
  local ca_file_path=""
  local cert_file_path=""
  local key_file_path=""

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --version)
        version="$2"
        shift
        ;;
      --path)
        path="$2"
        shift
        ;;
      --user)
        user="$2"
        shift
        ;;
      --ca-file-path)
        assert_not_empty "$key" "$2"
        ca_file_path="$2"
        shift
        ;;
      --cert-file-path)
        assert_not_empty "$key" "$2"
        cert_file_path="$2"
        shift
        ;;
      --key-file-path)
        assert_not_empty "$key" "$2"
        key_file_path="$2"
        shift
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  assert_not_empty "--version" "$version"
  assert_not_empty "--path" "$path"
  assert_not_empty "--user" "$user"

  log_info "Starting Consul install"

  install_dependencies
  create_consul_user "$user"
  create_consul_install_paths "$path" "$user"
  install_binaries "$version" "$path" "$user"

  if [[ ! -z "$ca_file_path" || ! -z "$cert_file_path" || ! -z "$key_file_path" ]]; then
    install_tls_certificates "$path" "$user" "$ca_file_path" "$cert_file_path" "$key_file_path"
  fi

  log_info "Consul install complete!"
}

install "$@"
